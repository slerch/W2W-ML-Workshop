{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Notebook 1 - Introduction to Jupyter, exploring/manipulating data with Pandas and plotting with Matplotlib\n",
    "\n",
    "- Feature engineering: Date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction to Jupyter notebooks\n",
    "\n",
    "*Optional*\n",
    "\n",
    "You can add extended functionalities by installing `conda install -c conda-forge jupyter_contrib_nbextensions`. This will add a tab to your dashboard, from where you can select the extension. By far the most useful in my opinion is the collapsible heading extension in combination with the table of contents extensions, which allow you to get a lot more organized!\n",
    "\n",
    "For changing the look of the notebook, you want to run `pip install jupyterthemes`. This will allow you to select different themes. For more information visit: https://github.com/dunovank/jupyter-themes\n",
    "\n",
    "### How to use these notebooks\n",
    "\n",
    "Do **NOT** just execute all the cells and feel good about it! To learn, open a new notebook and type everything yourself. Use the Jupyter notebook functionalities (see below). Looking at the solution is allowed but **no Copy-Paste**.\n",
    "\n",
    "If you are not that familiar with Python and the concepts presented here, your goal should be to do replicate the steps in these notebooks with as little peaking as possible. If you are more advanced, try to solve the additional challenges below.\n",
    "\n",
    "\n",
    "### Basic usage\n",
    "\n",
    "To start a Jupyter notebook, simply type `jupyter notebook` in the command line. If you do this locally (e.g. on your laptop) this should automatically open up a browser window with the dashboard. We will cover remote usage below.\n",
    "\n",
    "On the dashboard you can see all files in your current directory. (Note that you can click on any file and edit it.) Jupyter notebook files end in `.ipynb`. To create a new notebook, click on `New` and select a Python version. Now a new tab will appear with your empty notebook.\n",
    "\n",
    "### Cells\n",
    "\n",
    "Jupyter notebooks have cells such as this one. There are different types of cells. The two you will use most frequently are code cells and Markdown cells. This here is a Markdown cell, which allows you to write formatted text using Markdown. For a quick Markdown introduction, check out: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n",
    "\n",
    "Note that in markdown you can also type Latex:\n",
    "\n",
    "$x=\\frac{a}{b}$\n",
    "\n",
    "To switch the cell type, either use the toolbar above or press `y` for code and `m` for markdown in command mode, which we will get to now.\n",
    "\n",
    "### Modes\n",
    "\n",
    "To navigate Jupyter notebooks there are two modes: Command mode, which you can enter by pressing `esc` and edit mode which you can enter by pressing `Enter`. In edit mode you edit inside a cell, while in command mode you can edit the cells themselves. If you get confused about all the keys just press `h` in command mode, which will bring up a list of all keyboard shortcuts. Of course, you can also use the mouse and the toolbar.\n",
    "\n",
    "### Executing a cell\n",
    "\n",
    "To execute a cell, press `Shift + Enter`. This will run the code or render the text and jump to the next cell. If you would like to insert a cell below, type `Alt + Enter`.\n",
    "\n",
    "Now let's start by actually writing some code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Import modules just as you would in a regular Python script\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "# This will allow you to display plots inside the notebook.\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Assign variables\n",
    "a = 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# The value of the last object in the cell will be displayed\n",
    "b = 2\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "12"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a + b"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You do not have to work from top to bottom. You can always edit cells above.\n",
    "\n",
    "But pay attention: This means that the notebook might throw an error when executed in after restarting the kernel."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get function docs\n",
    "\n",
    "Next, let's create a basic plot and also note a super-handy functionality of the notebook: When using a function and pressing `Shift + Tab` when the cursor is inside the function parenthesis, it will bring up the list of arguments. Pressing it twice will bring up the doc string.\n",
    "\n",
    "Similarly, executing `?function_name` will bring up the doc string in a separate window. `??function_name` will bring up the source code."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXoAAAD8CAYAAAB5Pm/hAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAADjhJREFUeJzt3X+s3XV9x/HnS2BuURcxXEgtdZeY\nbhGXrZobYuKysOCUH4uFP1ggizaOpJpAholLrJoMt4WkZlM3l42sDiIkiCMBAglsA5nG+QfghXT8\nKsxGq9Q2tOpUiIlL4b0/7rfxiLc9v/vt/dznI7m553zu99zv+6Tw7Lff+z3npqqQJLXrVX0PIEma\nL0MvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUuFP7HgDgjDPOqMXFxb7HkKQ15dFH\nH/1+VS0M2+6kCP3i4iLLy8t9jyFJa0qS74yynaduJKlxQ0OfZFOSryTZk+SpJNd2659M8r0ku7uP\niwce87Eke5M8m+Q983wCkqTjG+XUzRHgI1X1WJLXAY8meaD72mer6m8HN05yLnAF8FbgjcCXk/xm\nVb00y8ElSaMZekRfVQer6rHu9gvAHmDjcR6yFfhSVf2sqr4N7AXOm8WwkqTxjXWOPski8Dbg4W7p\nmiSPJ7kpyend2kbguYGH7WeVvxiSbE+ynGT58OHDYw8uSRrNyKFP8lrgDuDDVfUT4AbgzcAW4CDw\n6aObrvLwX/rtJlW1q6qWqmppYWHo1UGSpAmNFPokp7ES+Vur6k6Aqnq+ql6qqpeBz/Pz0zP7gU0D\nDz8bODC7kSVJ4xjlqpsANwJ7quozA+sbBja7DHiyu30PcEWSVyc5B9gMPDK7kSVJ4xjlqpt3Au8D\nnkiyu1v7OHBlki2snJbZB3wQoKqeSnI78DQrV+xc7RU3ktSfoaGvqq+z+nn3+47zmOuB66eYS/oF\nizvu7W3f+3Ze0tu+pVnwlbGS1DhDL0mNM/SS1DhDL0mNM/SS1DhDL0mNM/SS1LiT4jdMSSezvq7h\n9/p9zYpH9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMv\nSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z9JLUOEMvSY0z\n9JLUuKGhT7IpyVeS7EnyVJJru/U3JHkgyTe7z6d360nyuSR7kzye5O3zfhKSpGMb5Yj+CPCRqnoL\n8A7g6iTnAjuAB6tqM/Bgdx/gImBz97EduGHmU0uSRjY09FV1sKoe626/AOwBNgJbgZu7zW4GLu1u\nbwVuqRUPAa9PsmHmk0uSRjLWOfoki8DbgIeBs6rqIKz8ZQCc2W22EXhu4GH7uzVJUg9GDn2S1wJ3\nAB+uqp8cb9NV1mqV77c9yXKS5cOHD486hiRpTCOFPslprET+1qq6s1t+/ugpme7zoW59P7Bp4OFn\nAwde+T2raldVLVXV0sLCwqTzS5KGGOWqmwA3Anuq6jMDX7oH2Nbd3gbcPbD+/u7qm3cAPz56ikeS\ndOKdOsI27wTeBzyRZHe39nFgJ3B7kquA7wKXd1+7D7gY2Av8FPjATCeWJI1laOir6uusft4d4IJV\nti/g6innkiTNiK+MlaTGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyh\nl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGjfLLwSX1YHHHvb3sd9/OS3rZ\nr+bHI3pJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TGGXpJapyhl6TG\nGXpJatzQ0Ce5KcmhJE8OrH0yyfeS7O4+Lh742seS7E3ybJL3zGtwSdJoRjmi/wJw4Srrn62qLd3H\nfQBJzgWuAN7aPeafkpwyq2ElSeMbGvqq+hrwwxG/31bgS1X1s6r6NrAXOG+K+SRJU5rmHP01SR7v\nTu2c3q1tBJ4b2GZ/tyZJ6smkob8BeDOwBTgIfLpbzyrb1mrfIMn2JMtJlg8fPjzhGJKkYSYKfVU9\nX1UvVdXLwOf5+emZ/cCmgU3PBg4c43vsqqqlqlpaWFiYZAxJ0ggmCn2SDQN3LwOOXpFzD3BFklcn\nOQfYDDwy3YiSpGkM/eXgSW4DzgfOSLIfuA44P8kWVk7L7AM+CFBVTyW5HXgaOAJcXVUvzWd0SdIo\nhoa+qq5cZfnG42x/PXD9NENJkmbHV8ZKUuMMvSQ1ztBLUuMMvSQ1ztBLUuMMvSQ1bujlldKgxR33\n9j2CpDF5RC9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0\nktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4\nQy9JjTP0ktQ4Qy9JjRsa+iQ3JTmU5MmBtTckeSDJN7vPp3frSfK5JHuTPJ7k7fMcXpI03ChH9F8A\nLnzF2g7gwaraDDzY3Qe4CNjcfWwHbpjNmJKkSQ0NfVV9DfjhK5a3Ajd3t28GLh1Yv6VWPAS8PsmG\nWQ0rSRrfpOfoz6qqgwDd5zO79Y3AcwPb7e/WfkmS7UmWkywfPnx4wjEkScPM+oexWWWtVtuwqnZV\n1VJVLS0sLMx4DEnSUZOG/vmjp2S6z4e69f3ApoHtzgYOTD6eJGlak4b+HmBbd3sbcPfA+vu7q2/e\nAfz46CkeSVI/Th22QZLbgPOBM5LsB64DdgK3J7kK+C5webf5fcDFwF7gp8AH5jCzpDla3HFvb/ve\nt/OS3vbdsqGhr6orj/GlC1bZtoCrpx1KkjQ7vjJWkhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZe\nkhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn\n6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWpcYZekhpn6CWp\ncYZekhp36jQPTrIPeAF4CThSVUtJ3gD8K7AI7AP+uKr+d7oxJUmTmsUR/R9U1ZaqWuru7wAerKrN\nwIPdfUlST6Y6oj+GrcD53e2bga8CH53DftatxR339j2CpDVk2iP6Au5P8miS7d3aWVV1EKD7fOaU\n+5AkTWHaI/p3VtWBJGcCDyR5ZtQHdn8xbAd405veNOUYkqRjmeqIvqoOdJ8PAXcB5wHPJ9kA0H0+\ndIzH7qqqpapaWlhYmGYMSdJxTBz6JK9J8rqjt4F3A08C9wDbus22AXdPO6QkaXLTnLo5C7grydHv\n88Wq+vck3wBuT3IV8F3g8unHlCRNauLQV9W3gN9dZf0HwAXTDCVJmh1fGStJjTP0ktQ4Qy9JjTP0\nktQ4Qy9JjTP0ktQ4Qy9JjTP0ktQ4Qy9JjTP0ktS4efziEUmaSF+/VGffzkt62e+J4hG9JDXO0EtS\n4wy9JDXO0EtS4wy9JDXO0EtS4wy9JDXO0EtS4wy9JDXO0EtS4wy9JDXO0EtS4wy9JDXOd6+cQl/v\ntCdJ4/CIXpIa5xG9pHWvz3+dn4j3wveIXpIaZ+glqXGGXpIaZ+glqXGGXpIaZ+glqXFzu7wyyYXA\n3wOnAP9SVTvnsR9ftCRJxzeXI/okpwD/CFwEnAtcmeTceexLknR88zp1cx6wt6q+VVX/B3wJ2Dqn\nfUmSjmNeod8IPDdwf3+3Jkk6weZ1jj6rrNUvbJBsB7Z3d19M8uycZjmWM4Dvn+B9zprPoX9rfX5Y\n+89hTc+fTwGTP4ffGGWjeYV+P7Bp4P7ZwIHBDapqF7BrTvsfKslyVS31tf9Z8Dn0b63PD2v/Oaz1\n+WH+z2Fep26+AWxOck6SXwGuAO6Z074kSccxlyP6qjqS5BrgP1i5vPKmqnpqHvuSJB3f3K6jr6r7\ngPvm9f1noLfTRjPkc+jfWp8f1v5zWOvzw5yfQ6pq+FaSpDXLt0CQpMat69An+eskjyfZneT+JG/s\ne6ZxJfmbJM90z+OuJK/ve6ZxJLk8yVNJXk6ypq6cSHJhkmeT7E2yo+95xpXkpiSHkjzZ9yyTSLIp\nyVeS7On+G7q275nGkeRXkzyS5L+7+f9ybvtaz6dukvx6Vf2ku/1nwLlV9aGexxpLkncD/9n9APxT\nAFX10Z7HGlmStwAvA/8M/HlVLfc80ki6t/n4H+APWbmc+BvAlVX1dK+DjSHJ7wMvArdU1W/3Pc+4\nkmwANlTVY0leBzwKXLpW/gySBHhNVb2Y5DTg68C1VfXQrPe1ro/oj0a+8xpe8aKutaCq7q+qI93d\nh1h5zcKaUVV7qupEv1huFtb823xU1deAH/Y9x6Sq6mBVPdbdfgHYwxp6BX6teLG7e1r3MZcGrevQ\nAyS5PslzwJ8Af9H3PFP6U+Df+h5infBtPk4iSRaBtwEP9zvJeJKckmQ3cAh4oKrmMn/zoU/y5SRP\nrvKxFaCqPlFVm4BbgWv6nXZ1w55Dt80ngCOsPI+Tyijzr0FD3+ZDJ0aS1wJ3AB9+xb/ST3pV9VJV\nbWHlX+LnJZnLKbS5XUd/sqiqd4246ReBe4Hr5jjORIY9hyTbgD8CLqiT8IcuY/wZrCVD3+ZD89ed\n274DuLWq7ux7nklV1Y+SfBW4EJj5D8ebP6I/niSbB+6+F3imr1km1f2Cl48C762qn/Y9zzri23z0\nrPth5o3Anqr6TN/zjCvJwtGr5JL8GvAu5tSg9X7VzR3Ab7Fy1cd3gA9V1ff6nWo8SfYCrwZ+0C09\ntJauHEpyGfAPwALwI2B3Vb2n36lGk+Ri4O/4+dt8XN/zSGNJchtwPivvnPg8cF1V3djrUGNI8nvA\nfwFPsPL/MMDHu1fln/SS/A5wMyv//bwKuL2q/mou+1rPoZek9WBdn7qRpPXA0EtS4wy9JDXO0EtS\n4wy9JDXO0EtS4wy9JDXO0EtS4/4f8xiY//lHPK4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x231e402e9e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(np.random.normal(size=1000))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "?plt.hist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "??plt.hist"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Sharing a notebook\n",
    "\n",
    "Here are several ways to share a Jupyter notebook.\n",
    "\n",
    "**GitHub**\n",
    "\n",
    "If the notebook is in a GitHub repository (which it probably should be!), GitHub will simply render the notebook for you like this: https://github.com/raspstephan/ESS-Python-Tutorial/blob/master/notebooks/jupyter-intro.ipynb\n",
    "\n",
    "**NBViewer**\n",
    "\n",
    "Another option is to copy the GitHub URL to http://nbviewer.jupyter.org/.\n",
    "\n",
    "**As HTML or PDF**\n",
    "\n",
    "You can also export the notebook to HTML or PDF by typing `jupyter nbconvert --to FORMAT notebook.ipynb` where `FORMAT` can be `pdf`, `html` or many others.\n",
    "\n",
    "More information here: https://ipython.org/ipython-doc/3/notebook/nbconvert.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Remote setup\n",
    "\n",
    "Now let's see how we can use Jupyter notebooks remotely.\n",
    "\n",
    "** Port tunnel**\n",
    "\n",
    "If you want to run Jupyter on a remote computer, you need to create a port tunnel in order to open the notebook locally in the browser. The command to do this is:\n",
    "\n",
    "`ssh -L localhost:8888:localhost:8888 user@host`\n",
    "\n",
    "This will create a tunnel for port 8888. If you do your actual computations on a different node, you can do the same thing to create a tunnel to that node:\n",
    "\n",
    "`ssh -L localhost:8888:localhost:8888 c-3-39`\n",
    "\n",
    "Now locally in your browser, go to `localhost:8888`. Most probably it will ask you for a token. You will find the token in the terminal where Jupyter is running, where it will look something like this:\n",
    "\n",
    "`http://localhost:8888/?token=940f1a436d91bde5ef15e3640dd66bd7d3f724a68513c99f`\n",
    "\n",
    "Just copy and paste the token after = and you should be good to go.\n",
    "\n",
    "**Screen**\n",
    "\n",
    "Since remote connections die sometimes (or all the time), it is really handy to use screen. Screen enables you to run processes remotely, which will continue even after your connection has timed out.\n",
    "\n",
    "To start a screen session, just type `screen`. To execute screen commands, you need to press `Ctrl + a` followed by a command. `c` will create a new window. `n` and `p` will go to the next and previous window. k will kill the window. Finally, `d` will detach from the window. To log back into a screen session after detaching or having been disconnected, simply type `screen -r`.\n",
    "\n",
    "Here is more information about screen: http://aperiodic.net/screen/quick_reference\n",
    "\n",
    "**Mounting**\n",
    "\n",
    "Finally, to edit remote files in your preferred editor (PyCharm, VSC, etc.), you might want to mount a remote directory. For Linux/Mac you can use sshfs. On the Mac you have to install OSXFuse. Here is a link outlining the process: https://blogs.harvard.edu/acts/2013/11/08/the-newbie-how-to-set-up-sshfs-on-mac-os-x/\n",
    "\n",
    "Then you can mount a remote directory: `sshfs srasp@gplogin1.ps.uci.edu:/export/home/srasp/ greenplanet_home/`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exploring and manipulating data with Pandas plus some basic plotting - Post-processing NWP forecasts\n",
    "\n",
    "Our first dataset will be a postprocessing dataset. Our aim is to correct biases of NWP temperature forecasts. The forecasts are ensemble means of the ECMWF TIGGE archive. The corresponding observations are taken at DWD surface stations. "
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
=======
   "execution_count": 6,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 6,
=======
   "execution_count": 7,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "DATADIR = './dataset1/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pp_sample_submission.csv\n",
      "pp_sample_submission.csv.zip\n",
      "pp_test.csv\n",
      "pp_test.csv.zip\n",
      "pp_train.csv\n",
      "pp_train.csv.zip\n"
     ]
    }
   ],
   "source": [
    "# Command line with !; $to use local variables in command line\n",
    "!ls $DATADIR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pp_sample_submission.csv',\n",
       " 'pp_sample_submission.csv.zip',\n",
       " 'pp_test.csv',\n",
       " 'pp_test.csv.zip',\n",
       " 'pp_train.csv',\n",
       " 'pp_train.csv.zip']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Unfortunately this might not work on Windows depending on your setup, so we will use os\n",
    "os.listdir(DATADIR)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first dataset we will use in this workshop is tabular. Tabular data are what you would use in Excel. To work with tabular data in Python, we will use Pandas. Pandas is very widely used which means that you will find an answer to any question you can think of online. Here is a quick overview of basic functionalities: https://pandas.pydata.org/pandas-docs/stable/basics.html\n",
    "\n",
    "Tabular data files are often saved as `.csv` files which we can easily read into a Pandas `DataFrame`.\n",
    "\n",
    "There are two datasets: a training and a test datset. First, let's ignore the test set and open the training set."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 1,
=======
   "execution_count": 15,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "# Don't worry about this statement. This just suppresses warnings later on.\n",
    "pd.options.mode.chained_assignment = None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "head: cannot open '$f./dataset1/pp_train.csv' for reading: No such file or directory\n"
     ]
    }
   ],
   "source": [
    "# Command line option\n",
    "!head $f'{DATADIR}pp_train.csv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ",t2m_obs,time,station,t2m_fc_mean,orog,station_alt,station_lat,station_lon,u_pl500_fc_mean,v_pl500_fc_mean,gh_pl500_fc_mean,u_pl850_fc_mean,v_pl850_fc_mean,q_pl850_fc_mean,cape_fc_mean,sp_fc_mean,tcc_fc_mean,sshf_fc_mean,slhf_fc_mean,u10_fc_mean,v10_fc_mean,ssr_fc_mean,str_fc_mean,d2m_fc_mean,sm_fc_mean\n",
      "\n",
      "0,1.2,2011-01-01,3,-0.022290079,107.43946,202.0,50.7827,6.0941,4.7604675,-4.907918,5619.513,5.040613,-2.4240947,0.0020729504,2.517037,101379.51,98.05601,634981.4,39645.008,2.2089093,0.75530154,2433034.8,-3513225.0,273.57892,374.63348\n",
      "\n",
      "1,1.6,2011-01-01,44,2.0864146,19.397774,44.0,52.9335,8.237,14.442179,-10.303844,5579.092,16.77781,-6.1201735,0.0017127863,1.8534747,101709.04,98.7418,1592483.9,370638.6,6.223993,0.800821,2427059.2,-1702554.9,275.06873,388.6035\n",
      "\n",
      "2,-6.3,2011-01-01,71,-6.609096,604.885,759.0,48.2156,8.9784,0.25433925,-6.2813725,5614.9375,0.8365133,-0.2675586,0.002297013,1.3541166,94432.85,91.60234,-1416809.8,-239365.98,-0.39441925,-0.95084035,4320586.0,-4435227.5,265.47473,437.023\n",
      "\n",
      "3,-3.0,2011-01-01,73,-5.0717525,461.4418,340.0,48.6159,13.0506,2.4893465,-10.044441,5588.1655,6.1789904,-1.3422626,0.002404796,1.821984,97368.55,91.13937,48696.496,-570603.4,1.9234713,0.33606747,5658946.5,-6691302.0,267.4964,366.52255\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# Windows-safe option\n",
    "def print_head(fn):\n",
    "    with open(fn) as f:\n",
    "        for i in range(5):\n",
    "            print(f.readline())\n",
    "print_head(f'{DATADIR}pp_train.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's load this dataset into a Pandas DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 9 s\n"
     ]
    }
   ],
   "source": [
    "# Time how long it takes to read file\n",
    "%time df_train = pd.read_csv(f'{DATADIR}pp_train.csv', index_col=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explore data"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
=======
   "execution_count": 19,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Before we play around with the data, let's save a copy\n",
    "df_train_raw = df_train.copy()\n",
    "# But watch out for RAM usage for larger datasets!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t2m_obs</th>\n",
       "      <th>time</th>\n",
       "      <th>station</th>\n",
       "      <th>t2m_fc_mean</th>\n",
       "      <th>orog</th>\n",
       "      <th>station_alt</th>\n",
       "      <th>station_lat</th>\n",
       "      <th>station_lon</th>\n",
       "      <th>u_pl500_fc_mean</th>\n",
       "      <th>v_pl500_fc_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>sp_fc_mean</th>\n",
       "      <th>tcc_fc_mean</th>\n",
       "      <th>sshf_fc_mean</th>\n",
       "      <th>slhf_fc_mean</th>\n",
       "      <th>u10_fc_mean</th>\n",
       "      <th>v10_fc_mean</th>\n",
       "      <th>ssr_fc_mean</th>\n",
       "      <th>str_fc_mean</th>\n",
       "      <th>d2m_fc_mean</th>\n",
       "      <th>sm_fc_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.2</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>3</td>\n",
       "      <td>-0.022290</td>\n",
       "      <td>107.439460</td>\n",
       "      <td>202.0</td>\n",
       "      <td>50.7827</td>\n",
       "      <td>6.0941</td>\n",
       "      <td>4.760467</td>\n",
       "      <td>-4.907918</td>\n",
       "      <td>...</td>\n",
       "      <td>101379.51</td>\n",
       "      <td>98.056010</td>\n",
       "      <td>634981.400</td>\n",
       "      <td>39645.008</td>\n",
       "      <td>2.208909</td>\n",
       "      <td>0.755302</td>\n",
       "      <td>2433034.8</td>\n",
       "      <td>-3513225.0</td>\n",
       "      <td>273.57892</td>\n",
       "      <td>374.63348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.6</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>44</td>\n",
       "      <td>2.086415</td>\n",
       "      <td>19.397774</td>\n",
       "      <td>44.0</td>\n",
       "      <td>52.9335</td>\n",
       "      <td>8.2370</td>\n",
       "      <td>14.442179</td>\n",
       "      <td>-10.303844</td>\n",
       "      <td>...</td>\n",
       "      <td>101709.04</td>\n",
       "      <td>98.741800</td>\n",
       "      <td>1592483.900</td>\n",
       "      <td>370638.600</td>\n",
       "      <td>6.223993</td>\n",
       "      <td>0.800821</td>\n",
       "      <td>2427059.2</td>\n",
       "      <td>-1702554.9</td>\n",
       "      <td>275.06873</td>\n",
       "      <td>388.60350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-6.3</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>71</td>\n",
       "      <td>-6.609096</td>\n",
       "      <td>604.885000</td>\n",
       "      <td>759.0</td>\n",
       "      <td>48.2156</td>\n",
       "      <td>8.9784</td>\n",
       "      <td>0.254339</td>\n",
       "      <td>-6.281372</td>\n",
       "      <td>...</td>\n",
       "      <td>94432.85</td>\n",
       "      <td>91.602340</td>\n",
       "      <td>-1416809.800</td>\n",
       "      <td>-239365.980</td>\n",
       "      <td>-0.394419</td>\n",
       "      <td>-0.950840</td>\n",
       "      <td>4320586.0</td>\n",
       "      <td>-4435227.5</td>\n",
       "      <td>265.47473</td>\n",
       "      <td>437.02300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-3.0</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>73</td>\n",
       "      <td>-5.071753</td>\n",
       "      <td>461.441800</td>\n",
       "      <td>340.0</td>\n",
       "      <td>48.6159</td>\n",
       "      <td>13.0506</td>\n",
       "      <td>2.489346</td>\n",
       "      <td>-10.044441</td>\n",
       "      <td>...</td>\n",
       "      <td>97368.55</td>\n",
       "      <td>91.139370</td>\n",
       "      <td>48696.496</td>\n",
       "      <td>-570603.400</td>\n",
       "      <td>1.923471</td>\n",
       "      <td>0.336067</td>\n",
       "      <td>5658946.5</td>\n",
       "      <td>-6691302.0</td>\n",
       "      <td>267.49640</td>\n",
       "      <td>366.52255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.5</td>\n",
       "      <td>2011-01-01</td>\n",
       "      <td>78</td>\n",
       "      <td>1.743580</td>\n",
       "      <td>47.632523</td>\n",
       "      <td>65.0</td>\n",
       "      <td>52.4853</td>\n",
       "      <td>7.9126</td>\n",
       "      <td>11.600490</td>\n",
       "      <td>-9.078665</td>\n",
       "      <td>...</td>\n",
       "      <td>101419.82</td>\n",
       "      <td>99.178986</td>\n",
       "      <td>1435826.900</td>\n",
       "      <td>616228.750</td>\n",
       "      <td>4.472726</td>\n",
       "      <td>0.673820</td>\n",
       "      <td>2416039.5</td>\n",
       "      <td>-1872194.9</td>\n",
       "      <td>274.56433</td>\n",
       "      <td>263.73572</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   t2m_obs        time  station  t2m_fc_mean        orog  station_alt  \\\n",
       "0      1.2  2011-01-01        3    -0.022290  107.439460        202.0   \n",
       "1      1.6  2011-01-01       44     2.086415   19.397774         44.0   \n",
       "2     -6.3  2011-01-01       71    -6.609096  604.885000        759.0   \n",
       "3     -3.0  2011-01-01       73    -5.071753  461.441800        340.0   \n",
       "4      0.5  2011-01-01       78     1.743580   47.632523         65.0   \n",
       "\n",
       "   station_lat  station_lon  u_pl500_fc_mean  v_pl500_fc_mean     ...      \\\n",
       "0      50.7827       6.0941         4.760467        -4.907918     ...       \n",
       "1      52.9335       8.2370        14.442179       -10.303844     ...       \n",
       "2      48.2156       8.9784         0.254339        -6.281372     ...       \n",
       "3      48.6159      13.0506         2.489346       -10.044441     ...       \n",
       "4      52.4853       7.9126        11.600490        -9.078665     ...       \n",
       "\n",
       "   sp_fc_mean  tcc_fc_mean  sshf_fc_mean  slhf_fc_mean  u10_fc_mean  \\\n",
       "0   101379.51    98.056010    634981.400     39645.008     2.208909   \n",
       "1   101709.04    98.741800   1592483.900    370638.600     6.223993   \n",
       "2    94432.85    91.602340  -1416809.800   -239365.980    -0.394419   \n",
       "3    97368.55    91.139370     48696.496   -570603.400     1.923471   \n",
       "4   101419.82    99.178986   1435826.900    616228.750     4.472726   \n",
       "\n",
       "   v10_fc_mean  ssr_fc_mean  str_fc_mean  d2m_fc_mean  sm_fc_mean  \n",
       "0     0.755302    2433034.8   -3513225.0    273.57892   374.63348  \n",
       "1     0.800821    2427059.2   -1702554.9    275.06873   388.60350  \n",
       "2    -0.950840    4320586.0   -4435227.5    265.47473   437.02300  \n",
       "3     0.336067    5658946.5   -6691302.0    267.49640   366.52255  \n",
       "4     0.673820    2416039.5   -1872194.9    274.56433   263.73572  \n",
       "\n",
       "[5 rows x 25 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Show the first five rows. .tail() for the last five\n",
    "df_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "980562"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# How many rows\n",
    "len(df_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['t2m_obs', 'time', 'station', 't2m_fc_mean', 'orog', 'station_alt',\n",
       "       'station_lat', 'station_lon', 'u_pl500_fc_mean', 'v_pl500_fc_mean',\n",
       "       'gh_pl500_fc_mean', 'u_pl850_fc_mean', 'v_pl850_fc_mean',\n",
       "       'q_pl850_fc_mean', 'cape_fc_mean', 'sp_fc_mean', 'tcc_fc_mean',\n",
       "       'sshf_fc_mean', 'slhf_fc_mean', 'u10_fc_mean', 'v10_fc_mean',\n",
       "       'ssr_fc_mean', 'str_fc_mean', 'd2m_fc_mean', 'sm_fc_mean'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![title](images/variables.png)\n",
    "https://arxiv.org/abs/1805.09091"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t2m_obs</th>\n",
       "      <th>station</th>\n",
       "      <th>t2m_fc_mean</th>\n",
       "      <th>orog</th>\n",
       "      <th>station_alt</th>\n",
       "      <th>station_lat</th>\n",
       "      <th>station_lon</th>\n",
       "      <th>u_pl500_fc_mean</th>\n",
       "      <th>v_pl500_fc_mean</th>\n",
       "      <th>gh_pl500_fc_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>sp_fc_mean</th>\n",
       "      <th>tcc_fc_mean</th>\n",
       "      <th>sshf_fc_mean</th>\n",
       "      <th>slhf_fc_mean</th>\n",
       "      <th>u10_fc_mean</th>\n",
       "      <th>v10_fc_mean</th>\n",
       "      <th>ssr_fc_mean</th>\n",
       "      <th>str_fc_mean</th>\n",
       "      <th>d2m_fc_mean</th>\n",
       "      <th>sm_fc_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>908857.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>...</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>9.805620e+05</td>\n",
       "      <td>9.805620e+05</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>9.805620e+05</td>\n",
       "      <td>9.805620e+05</td>\n",
       "      <td>980562.000000</td>\n",
       "      <td>886600.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>7.531618</td>\n",
       "      <td>3726.726257</td>\n",
       "      <td>7.305595</td>\n",
       "      <td>295.234511</td>\n",
       "      <td>289.700186</td>\n",
       "      <td>50.812609</td>\n",
       "      <td>10.184040</td>\n",
       "      <td>8.823780</td>\n",
       "      <td>-0.302459</td>\n",
       "      <td>5607.319530</td>\n",
       "      <td>...</td>\n",
       "      <td>98167.966711</td>\n",
       "      <td>61.148280</td>\n",
       "      <td>-1.767204e+06</td>\n",
       "      <td>-8.152601e+06</td>\n",
       "      <td>0.792879</td>\n",
       "      <td>0.643888</td>\n",
       "      <td>1.928963e+07</td>\n",
       "      <td>-9.371092e+06</td>\n",
       "      <td>277.832031</td>\n",
       "      <td>343.767861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.579644</td>\n",
       "      <td>2719.500011</td>\n",
       "      <td>6.718977</td>\n",
       "      <td>234.161776</td>\n",
       "      <td>278.959584</td>\n",
       "      <td>1.915865</td>\n",
       "      <td>2.084653</td>\n",
       "      <td>10.804031</td>\n",
       "      <td>10.906147</td>\n",
       "      <td>148.716669</td>\n",
       "      <td>...</td>\n",
       "      <td>2799.084576</td>\n",
       "      <td>31.656075</td>\n",
       "      <td>4.201333e+06</td>\n",
       "      <td>5.924629e+06</td>\n",
       "      <td>2.601944</td>\n",
       "      <td>1.994099</td>\n",
       "      <td>1.228819e+07</td>\n",
       "      <td>3.442328e+06</td>\n",
       "      <td>6.616596</td>\n",
       "      <td>61.335377</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-26.200000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>-21.508630</td>\n",
       "      <td>-1.427856</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>47.398600</td>\n",
       "      <td>6.024400</td>\n",
       "      <td>-34.023964</td>\n",
       "      <td>-51.873432</td>\n",
       "      <td>4976.940000</td>\n",
       "      <td>...</td>\n",
       "      <td>84283.160000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-3.243611e+07</td>\n",
       "      <td>-5.462550e+07</td>\n",
       "      <td>-14.955598</td>\n",
       "      <td>-15.886876</td>\n",
       "      <td>3.300497e+05</td>\n",
       "      <td>-2.136808e+07</td>\n",
       "      <td>247.132420</td>\n",
       "      <td>64.123955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.800000</td>\n",
       "      <td>1639.000000</td>\n",
       "      <td>2.331773</td>\n",
       "      <td>67.390170</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>49.244500</td>\n",
       "      <td>8.576100</td>\n",
       "      <td>1.466554</td>\n",
       "      <td>-6.884149</td>\n",
       "      <td>5507.763700</td>\n",
       "      <td>...</td>\n",
       "      <td>96367.070000</td>\n",
       "      <td>34.416545</td>\n",
       "      <td>-4.712416e+06</td>\n",
       "      <td>-1.300108e+07</td>\n",
       "      <td>-1.076624</td>\n",
       "      <td>-0.712025</td>\n",
       "      <td>7.668573e+06</td>\n",
       "      <td>-1.182197e+07</td>\n",
       "      <td>273.451382</td>\n",
       "      <td>308.552310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.800000</td>\n",
       "      <td>3348.000000</td>\n",
       "      <td>7.676022</td>\n",
       "      <td>296.438720</td>\n",
       "      <td>238.000000</td>\n",
       "      <td>50.736400</td>\n",
       "      <td>10.048000</td>\n",
       "      <td>8.571194</td>\n",
       "      <td>0.297703</td>\n",
       "      <td>5629.717300</td>\n",
       "      <td>...</td>\n",
       "      <td>98335.900000</td>\n",
       "      <td>67.456060</td>\n",
       "      <td>-1.958288e+06</td>\n",
       "      <td>-7.106672e+06</td>\n",
       "      <td>0.762717</td>\n",
       "      <td>0.707770</td>\n",
       "      <td>1.845740e+07</td>\n",
       "      <td>-9.528052e+06</td>\n",
       "      <td>278.301150</td>\n",
       "      <td>358.254030</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>12.500000</td>\n",
       "      <td>5277.000000</td>\n",
       "      <td>12.487657</td>\n",
       "      <td>436.711360</td>\n",
       "      <td>440.000000</td>\n",
       "      <td>52.178900</td>\n",
       "      <td>11.813300</td>\n",
       "      <td>15.717412</td>\n",
       "      <td>7.203771</td>\n",
       "      <td>5719.493700</td>\n",
       "      <td>...</td>\n",
       "      <td>100424.337500</td>\n",
       "      <td>90.847860</td>\n",
       "      <td>8.736628e+05</td>\n",
       "      <td>-2.717170e+06</td>\n",
       "      <td>2.310319</td>\n",
       "      <td>1.861252</td>\n",
       "      <td>2.953434e+07</td>\n",
       "      <td>-7.014966e+06</td>\n",
       "      <td>282.778200</td>\n",
       "      <td>385.054400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>30.400000</td>\n",
       "      <td>15555.000000</td>\n",
       "      <td>26.242172</td>\n",
       "      <td>1268.067900</td>\n",
       "      <td>2964.000000</td>\n",
       "      <td>55.011000</td>\n",
       "      <td>14.950600</td>\n",
       "      <td>53.232000</td>\n",
       "      <td>37.145084</td>\n",
       "      <td>5940.681000</td>\n",
       "      <td>...</td>\n",
       "      <td>104708.470000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>1.657920e+07</td>\n",
       "      <td>9.008404e+06</td>\n",
       "      <td>21.202560</td>\n",
       "      <td>18.126524</td>\n",
       "      <td>5.411776e+07</td>\n",
       "      <td>1.604214e+06</td>\n",
       "      <td>293.593700</td>\n",
       "      <td>541.179440</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             t2m_obs        station    t2m_fc_mean           orog  \\\n",
       "count  908857.000000  980562.000000  980562.000000  980562.000000   \n",
       "mean        7.531618    3726.726257       7.305595     295.234511   \n",
       "std         6.579644    2719.500011       6.718977     234.161776   \n",
       "min       -26.200000       3.000000     -21.508630      -1.427856   \n",
       "25%         2.800000    1639.000000       2.331773      67.390170   \n",
       "50%         7.800000    3348.000000       7.676022     296.438720   \n",
       "75%        12.500000    5277.000000      12.487657     436.711360   \n",
       "max        30.400000   15555.000000      26.242172    1268.067900   \n",
       "\n",
       "         station_alt    station_lat    station_lon  u_pl500_fc_mean  \\\n",
       "count  980562.000000  980562.000000  980562.000000    980562.000000   \n",
       "mean      289.700186      50.812609      10.184040         8.823780   \n",
       "std       278.959584       1.915865       2.084653        10.804031   \n",
       "min         0.000000      47.398600       6.024400       -34.023964   \n",
       "25%        72.000000      49.244500       8.576100         1.466554   \n",
       "50%       238.000000      50.736400      10.048000         8.571194   \n",
       "75%       440.000000      52.178900      11.813300        15.717412   \n",
       "max      2964.000000      55.011000      14.950600        53.232000   \n",
       "\n",
       "       v_pl500_fc_mean  gh_pl500_fc_mean      ...           sp_fc_mean  \\\n",
       "count    980562.000000     980562.000000      ...        980562.000000   \n",
       "mean         -0.302459       5607.319530      ...         98167.966711   \n",
       "std          10.906147        148.716669      ...          2799.084576   \n",
       "min         -51.873432       4976.940000      ...         84283.160000   \n",
       "25%          -6.884149       5507.763700      ...         96367.070000   \n",
       "50%           0.297703       5629.717300      ...         98335.900000   \n",
       "75%           7.203771       5719.493700      ...        100424.337500   \n",
       "max          37.145084       5940.681000      ...        104708.470000   \n",
       "\n",
       "         tcc_fc_mean  sshf_fc_mean  slhf_fc_mean    u10_fc_mean  \\\n",
       "count  980562.000000  9.805620e+05  9.805620e+05  980562.000000   \n",
       "mean       61.148280 -1.767204e+06 -8.152601e+06       0.792879   \n",
       "std        31.656075  4.201333e+06  5.924629e+06       2.601944   \n",
       "min         0.000000 -3.243611e+07 -5.462550e+07     -14.955598   \n",
       "25%        34.416545 -4.712416e+06 -1.300108e+07      -1.076624   \n",
       "50%        67.456060 -1.958288e+06 -7.106672e+06       0.762717   \n",
       "75%        90.847860  8.736628e+05 -2.717170e+06       2.310319   \n",
       "max       100.000000  1.657920e+07  9.008404e+06      21.202560   \n",
       "\n",
       "         v10_fc_mean   ssr_fc_mean   str_fc_mean    d2m_fc_mean     sm_fc_mean  \n",
       "count  980562.000000  9.805620e+05  9.805620e+05  980562.000000  886600.000000  \n",
       "mean        0.643888  1.928963e+07 -9.371092e+06     277.832031     343.767861  \n",
       "std         1.994099  1.228819e+07  3.442328e+06       6.616596      61.335377  \n",
       "min       -15.886876  3.300497e+05 -2.136808e+07     247.132420      64.123955  \n",
       "25%        -0.712025  7.668573e+06 -1.182197e+07     273.451382     308.552310  \n",
       "50%         0.707770  1.845740e+07 -9.528052e+06     278.301150     358.254030  \n",
       "75%         1.861252  2.953434e+07 -7.014966e+06     282.778200     385.054400  \n",
       "max        18.126524  5.411776e+07  1.604214e+06     293.593700     541.179440  \n",
       "\n",
       "[8 rows x 24 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "t2m_obs             float64\n",
       "time                 object\n",
       "station               int64\n",
       "t2m_fc_mean         float64\n",
       "orog                float64\n",
       "station_alt         float64\n",
       "station_lat         float64\n",
       "station_lon         float64\n",
       "u_pl500_fc_mean     float64\n",
       "v_pl500_fc_mean     float64\n",
       "gh_pl500_fc_mean    float64\n",
       "u_pl850_fc_mean     float64\n",
       "v_pl850_fc_mean     float64\n",
       "q_pl850_fc_mean     float64\n",
       "cape_fc_mean        float64\n",
       "sp_fc_mean          float64\n",
       "tcc_fc_mean         float64\n",
       "sshf_fc_mean        float64\n",
       "slhf_fc_mean        float64\n",
       "u10_fc_mean         float64\n",
       "v10_fc_mean         float64\n",
       "ssr_fc_mean         float64\n",
       "str_fc_mean         float64\n",
       "d2m_fc_mean         float64\n",
       "sm_fc_mean          float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Display the data type of each column\n",
    "df_train.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each column is a Pandas Series."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.2\n",
       "1    1.6\n",
       "2   -6.3\n",
       "3   -3.0\n",
       "4    0.5\n",
       "Name: t2m_obs, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train['t2m_obs'].head()  # same as df_train.t2m_obs except for assignement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "537"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Home many unique stations\n",
    "df_train['station'].nunique()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can also do computations column-wise, such as min, max, mean, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('2011-01-01', '2015-12-31')"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.time.min(), df_train.time.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7.531618395413346, 7.305594593821011)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.t2m_obs.mean(),df_train.t2m_fc_mean.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas Series objects have some build in plotting functionality with is based on Matplotlib."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x231e8ccb7f0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_train.t2m_obs.hist(range=(-30, 40), bins=100, label='obs')\n",
    "df_train.t2m_fc_mean.hist(range=(-30, 40), bins=100, alpha=0.5, label='fc')\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another convenient way to plot tabular data is Seaborn: https://seaborn.pydata.org/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x23181cddfd0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "# Only take every 1000th value\n",
    "sns.regplot(data=df_train.iloc[::1000], x='t2m_obs', y='t2m_fc_mean');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Clean the dataset\n",
    "\n",
    "Next we need to check whether there are missing values and what to do with them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "t2m_obs             0.073126\n",
       "time                0.000000\n",
       "station             0.000000\n",
       "t2m_fc_mean         0.000000\n",
       "orog                0.000000\n",
       "station_alt         0.000000\n",
       "station_lat         0.000000\n",
       "station_lon         0.000000\n",
       "u_pl500_fc_mean     0.000000\n",
       "v_pl500_fc_mean     0.000000\n",
       "gh_pl500_fc_mean    0.000000\n",
       "u_pl850_fc_mean     0.000000\n",
       "v_pl850_fc_mean     0.000000\n",
       "q_pl850_fc_mean     0.000000\n",
       "cape_fc_mean        0.000000\n",
       "sp_fc_mean          0.000000\n",
       "tcc_fc_mean         0.000000\n",
       "sshf_fc_mean        0.000000\n",
       "slhf_fc_mean        0.000000\n",
       "u10_fc_mean         0.000000\n",
       "v10_fc_mean         0.000000\n",
       "ssr_fc_mean         0.000000\n",
       "str_fc_mean         0.000000\n",
       "d2m_fc_mean         0.000000\n",
       "sm_fc_mean          0.095825\n",
       "dtype: float64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What is the fraction of missing values for each column\n",
    "df_train.apply(pd.Series.isna).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are two columns with missing values: `t2m_obs` and `sm_fc_mean`. The first one is the variable we want to predict. If we don't have the answer, we cannot use it for training our algorithms. For this reason we will throw these rows away. The second is just a predictor variable. Here we don't want to throw the entire row away. One way to deal with these missing values is to set the value to the mean over all samples."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 28,
=======
   "execution_count": 32,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Drop rows where observations are missing\n",
    "df_train.dropna(subset=['t2m_obs'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 29,
=======
   "execution_count": 33,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Replace missing sm_fc_mean values with the column mean\n",
    "df_train['sm_fc_mean'].replace(np.nan, df_train.sm_fc_mean.mean(), inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Split data into features (inputs) and targets (outputs)\n",
    "\n",
    "To train our algorithm we need to split the variables we want to give the algorithm to make a prediction and the variable it should predict, in our case `t2m_obs`. Furthermore we will throw away the variables which we are not using at this time: `time` and `station`. These variables might be useful, but are not simple continuous variables and require some more thought."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 30,
=======
   "execution_count": 34,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Split features and targets\n",
    "# At the moment we only want continuous variables in the data set\n",
    "# so we will throw away the station ID, along with the time\n",
    "X_train = df_train.drop(['t2m_obs', 'time', 'station'], axis=1)\n",
    "y_train = df_train['t2m_obs']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalize input data\n",
    "\n",
    "Many machine learning algorithms require all the features to have the same order of magnitude for reasons we will see later. The simplest way to achieve this is to subtract the mean and divide by the standard deviation."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 31,
=======
   "execution_count": 35,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train = (X_train - X_train.mean()) / X_train.std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t2m_fc_mean</th>\n",
       "      <th>orog</th>\n",
       "      <th>station_alt</th>\n",
       "      <th>station_lat</th>\n",
       "      <th>station_lon</th>\n",
       "      <th>u_pl500_fc_mean</th>\n",
       "      <th>v_pl500_fc_mean</th>\n",
       "      <th>gh_pl500_fc_mean</th>\n",
       "      <th>u_pl850_fc_mean</th>\n",
       "      <th>v_pl850_fc_mean</th>\n",
       "      <th>...</th>\n",
       "      <th>sp_fc_mean</th>\n",
       "      <th>tcc_fc_mean</th>\n",
       "      <th>sshf_fc_mean</th>\n",
       "      <th>slhf_fc_mean</th>\n",
       "      <th>u10_fc_mean</th>\n",
       "      <th>v10_fc_mean</th>\n",
       "      <th>ssr_fc_mean</th>\n",
       "      <th>str_fc_mean</th>\n",
       "      <th>d2m_fc_mean</th>\n",
       "      <th>sm_fc_mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-1.085537</td>\n",
       "      <td>-0.806304</td>\n",
       "      <td>-0.319616</td>\n",
       "      <td>-0.014388</td>\n",
       "      <td>-1.988359</td>\n",
       "      <td>-0.375583</td>\n",
       "      <td>-0.420998</td>\n",
       "      <td>0.082273</td>\n",
       "      <td>0.032273</td>\n",
       "      <td>-0.589303</td>\n",
       "      <td>...</td>\n",
       "      <td>1.153825</td>\n",
       "      <td>1.165866</td>\n",
       "      <td>0.571970</td>\n",
       "      <td>1.383392</td>\n",
       "      <td>0.551740</td>\n",
       "      <td>0.058768</td>\n",
       "      <td>-1.371728</td>\n",
       "      <td>1.699146</td>\n",
       "      <td>-0.637595</td>\n",
       "      <td>0.524749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.772045</td>\n",
       "      <td>-1.182264</td>\n",
       "      <td>-0.890327</td>\n",
       "      <td>1.113170</td>\n",
       "      <td>-0.962599</td>\n",
       "      <td>0.520713</td>\n",
       "      <td>-0.916043</td>\n",
       "      <td>-0.189695</td>\n",
       "      <td>1.584633</td>\n",
       "      <td>-1.304124</td>\n",
       "      <td>...</td>\n",
       "      <td>1.271600</td>\n",
       "      <td>1.187512</td>\n",
       "      <td>0.800075</td>\n",
       "      <td>1.439388</td>\n",
       "      <td>2.107265</td>\n",
       "      <td>0.081871</td>\n",
       "      <td>-1.372214</td>\n",
       "      <td>2.224538</td>\n",
       "      <td>-0.412719</td>\n",
       "      <td>0.764039</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-2.064770</td>\n",
       "      <td>1.317913</td>\n",
       "      <td>1.692322</td>\n",
       "      <td>-1.360192</td>\n",
       "      <td>-0.607706</td>\n",
       "      <td>-0.792744</td>\n",
       "      <td>-0.547005</td>\n",
       "      <td>0.051487</td>\n",
       "      <td>-0.523761</td>\n",
       "      <td>-0.172229</td>\n",
       "      <td>...</td>\n",
       "      <td>-1.328921</td>\n",
       "      <td>0.962162</td>\n",
       "      <td>0.083173</td>\n",
       "      <td>1.336190</td>\n",
       "      <td>-0.456843</td>\n",
       "      <td>-0.807191</td>\n",
       "      <td>-1.217983</td>\n",
       "      <td>1.431614</td>\n",
       "      <td>-1.860869</td>\n",
       "      <td>1.593406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-1.836220</td>\n",
       "      <td>0.705375</td>\n",
       "      <td>0.178854</td>\n",
       "      <td>-1.150334</td>\n",
       "      <td>1.341568</td>\n",
       "      <td>-0.585835</td>\n",
       "      <td>-0.892244</td>\n",
       "      <td>-0.128645</td>\n",
       "      <td>0.182835</td>\n",
       "      <td>-0.380077</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.279698</td>\n",
       "      <td>0.947549</td>\n",
       "      <td>0.432299</td>\n",
       "      <td>1.280152</td>\n",
       "      <td>0.441155</td>\n",
       "      <td>-0.154016</td>\n",
       "      <td>-1.108971</td>\n",
       "      <td>0.776981</td>\n",
       "      <td>-1.555712</td>\n",
       "      <td>0.385818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.823013</td>\n",
       "      <td>-1.061694</td>\n",
       "      <td>-0.814473</td>\n",
       "      <td>0.878201</td>\n",
       "      <td>-1.117882</td>\n",
       "      <td>0.257640</td>\n",
       "      <td>-0.803640</td>\n",
       "      <td>-0.128599</td>\n",
       "      <td>1.245830</td>\n",
       "      <td>-1.128760</td>\n",
       "      <td>...</td>\n",
       "      <td>1.168232</td>\n",
       "      <td>1.201311</td>\n",
       "      <td>0.762755</td>\n",
       "      <td>1.480936</td>\n",
       "      <td>1.428789</td>\n",
       "      <td>0.017412</td>\n",
       "      <td>-1.373112</td>\n",
       "      <td>2.175315</td>\n",
       "      <td>-0.488854</td>\n",
       "      <td>-1.374796</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   t2m_fc_mean      orog  station_alt  station_lat  station_lon  \\\n",
       "0    -1.085537 -0.806304    -0.319616    -0.014388    -1.988359   \n",
       "1    -0.772045 -1.182264    -0.890327     1.113170    -0.962599   \n",
       "2    -2.064770  1.317913     1.692322    -1.360192    -0.607706   \n",
       "3    -1.836220  0.705375     0.178854    -1.150334     1.341568   \n",
       "4    -0.823013 -1.061694    -0.814473     0.878201    -1.117882   \n",
       "\n",
       "   u_pl500_fc_mean  v_pl500_fc_mean  gh_pl500_fc_mean  u_pl850_fc_mean  \\\n",
       "0        -0.375583        -0.420998          0.082273         0.032273   \n",
       "1         0.520713        -0.916043         -0.189695         1.584633   \n",
       "2        -0.792744        -0.547005          0.051487        -0.523761   \n",
       "3        -0.585835        -0.892244         -0.128645         0.182835   \n",
       "4         0.257640        -0.803640         -0.128599         1.245830   \n",
       "\n",
       "   v_pl850_fc_mean     ...      sp_fc_mean  tcc_fc_mean  sshf_fc_mean  \\\n",
       "0        -0.589303     ...        1.153825     1.165866      0.571970   \n",
       "1        -1.304124     ...        1.271600     1.187512      0.800075   \n",
       "2        -0.172229     ...       -1.328921     0.962162      0.083173   \n",
       "3        -0.380077     ...       -0.279698     0.947549      0.432299   \n",
       "4        -1.128760     ...        1.168232     1.201311      0.762755   \n",
       "\n",
       "   slhf_fc_mean  u10_fc_mean  v10_fc_mean  ssr_fc_mean  str_fc_mean  \\\n",
       "0      1.383392     0.551740     0.058768    -1.371728     1.699146   \n",
       "1      1.439388     2.107265     0.081871    -1.372214     2.224538   \n",
       "2      1.336190    -0.456843    -0.807191    -1.217983     1.431614   \n",
       "3      1.280152     0.441155    -0.154016    -1.108971     0.776981   \n",
       "4      1.480936     1.428789     0.017412    -1.373112     2.175315   \n",
       "\n",
       "   d2m_fc_mean  sm_fc_mean  \n",
       "0    -0.637595    0.524749  \n",
       "1    -0.412719    0.764039  \n",
       "2    -1.860869    1.593406  \n",
       "3    -1.555712    0.385818  \n",
       "4    -0.488854   -1.374796  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Preprocessing in one function"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 33,
=======
   "execution_count": 37,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def preproc(df_in, means=None, stds=None, drop_vars=['time', 'station']):\n",
    "    df = df_in.copy()\n",
    "    if 't2m_obs' in df.columns: df.dropna(subset=['t2m_obs'], inplace=True)\n",
    "    df['sm_fc_mean'].replace(np.nan, df['sm_fc_mean'].mean(), inplace=True)\n",
    "    \n",
    "    y = df.pop('t2m_obs') if 't2m_obs' in df.columns else None\n",
    "    X = df.drop(drop_vars, 1)\n",
    "    \n",
    "    if means is None: means = X.mean()\n",
    "    if stds  is None: stds  = X.std()\n",
    "    \n",
    "    X = (X - means) / stds\n",
    "    return X, y, means, stds"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 34,
=======
   "execution_count": 38,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train, y_train, means, stds = preproc(df_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Training, test and validation sets\n",
    "The first thing you will notice is that the test set does not have the `t2m_obs` column. So what are these different datasets?\n",
    "\n",
    "- Training set: Data used to optimize the machine learning algorithm\n",
    "- Validation set: Data used to independently verify the skill of the algorithm\n",
    "- Test set: Another independent set used for final verification. In this case the solutions are hidden (I have them, hehe)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 1.27 s\n"
     ]
    }
   ],
   "source": [
    "# Read test dataset\n",
    "%time df_test = pd.read_csv(f'{DATADIR}pp_test.csv', index_col=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(908857, 182218)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(df_train), len(df_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('2011-01-01', '2015-12-31')"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.time.min(), df_train.time.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('2016-01-01', '2016-12-31')"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.time.min(), df_test.time.max()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is no target information in the test dataset. Only I have it, haha! \n",
    "\n",
    "Which means we cannot use this dataset for checking the skill of our algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(Index(['t2m_obs', 'time', 'station', 't2m_fc_mean', 'orog', 'station_alt',\n",
       "        'station_lat', 'station_lon', 'u_pl500_fc_mean', 'v_pl500_fc_mean',\n",
       "        'gh_pl500_fc_mean', 'u_pl850_fc_mean', 'v_pl850_fc_mean',\n",
       "        'q_pl850_fc_mean', 'cape_fc_mean', 'sp_fc_mean', 'tcc_fc_mean',\n",
       "        'sshf_fc_mean', 'slhf_fc_mean', 'u10_fc_mean', 'v10_fc_mean',\n",
       "        'ssr_fc_mean', 'str_fc_mean', 'd2m_fc_mean', 'sm_fc_mean'],\n",
       "       dtype='object'),\n",
       " Index(['time', 'station', 't2m_fc_mean', 'orog', 'station_alt', 'station_lat',\n",
       "        'station_lon', 'u_pl500_fc_mean', 'v_pl500_fc_mean', 'gh_pl500_fc_mean',\n",
       "        'u_pl850_fc_mean', 'v_pl850_fc_mean', 'q_pl850_fc_mean', 'cape_fc_mean',\n",
       "        'sp_fc_mean', 'tcc_fc_mean', 'sshf_fc_mean', 'slhf_fc_mean',\n",
       "        'u10_fc_mean', 'v10_fc_mean', 'ssr_fc_mean', 'str_fc_mean',\n",
       "        'd2m_fc_mean', 'sm_fc_mean'],\n",
       "       dtype='object'))"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.columns, df_test.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get a validation skill that fairly represents operational conditions, we will also split by time."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 40,
=======
   "execution_count": 44,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "split_date = '2015-01-01'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's important to use the same means and stds to normalize each dataset."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 41,
=======
   "execution_count": 45,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_train, y_train, means, stds = preproc(df_train[df_train.time < split_date])"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 42,
=======
   "execution_count": 46,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_valid, y_valid, _, _ = preproc(df_train[df_train.time >= split_date], means, stds)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 43,
=======
   "execution_count": 47,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "X_test, _, _, _ = preproc(df_test, means, stds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "((728008, 22), (180849, 22), (182218, 22))"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape, X_valid.shape, X_test.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save preprocessed datasets\n",
    "\n",
    "Let's save these datasets so we can load them in a different notebook. The easiest way to save Python objects is Pickle."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 45,
=======
   "execution_count": 49,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pickle"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 46,
=======
   "execution_count": 50,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "os.makedirs('./tmp/', exist_ok=True)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 47,
=======
   "execution_count": 51,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('./tmp/preproc_data.pkl', 'wb') as f:\n",
    "    pickle.dump((X_train, y_train, X_valid, y_valid, X_test), f)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 48,
=======
   "execution_count": 52,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# To load\n",
    "with open('./tmp/preproc_data.pkl', 'rb') as f:\n",
    "    X_train, y_train, X_valid, y_valid, X_test = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 49,
=======
   "execution_count": 53,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Also save the processed datasets\n",
    "with open('./tmp/dfs.pkl', 'wb') as f:\n",
    "    pickle.dump((df_train, df_test), f)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Our first Kaggle submission\n",
    "\n",
    "Let's just always predict the mean."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 50,
=======
   "execution_count": 54,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def create_sub(preds, fn=None):\n",
    "    df =  pd.DataFrame({'Id': range(len(preds)), 'Expected': preds})\n",
    "    if fn is not None: df.to_csv(DATADIR + fn, index=False)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 51,
=======
   "execution_count": 55,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_sub = create_sub([df_train.t2m_fc_mean.mean()]*len(df_test), 'mean.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Expected</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>7.279572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>7.279572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>7.279572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>7.279572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>7.279572</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id  Expected\n",
       "0   0  7.279572\n",
       "1   1  7.279572\n",
       "2   2  7.279572\n",
       "3   3  7.279572\n",
       "4   4  7.279572"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sub.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Id,Expected\n",
      "\n",
      "0,7.279571712763294\n",
      "\n",
      "1,7.279571712763294\n",
      "\n",
      "2,7.279571712763294\n",
      "\n",
      "3,7.279571712763294\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print_head(f'{DATADIR}mean.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Your turn\n",
    "\n",
    "Now it's your turn. If you are not very familiar with what I have just presented, just open up a new notebook and try to replicate all the steps with as little \"cheating\" as possible. If you are a pro and this was easy, here are some challenges for you!\n",
    "\n",
    "1. We will use the mean squared error (MSE) as a metric for our forecast skill. What is the MSE of the raw forecast?\n",
    "2. How much can you improve the MSE by simply correcting the bias? Submit your bias-corrected values to kaggle.\n",
    "3. Does the bias depend on the time of year?\n",
    "4. Is there a geographical pattern?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus: Plot station locations on map with cartopy\n",
    "\n",
    "cartopy is the new basemap. It is similarly awkward to use but at least there is active development and a decent documentation. If you are interested, here is how to plot the station locations on a map of Germany."
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 66,
=======
   "execution_count": 58,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Get unique stations lats and lons\n",
    "stats = list(np.unique(df_train.station))\n",
    "lats = [df_train.station_lat[df_train.station == s].iloc[0] for s in stats]\n",
    "lons = [df_train.station_lon[df_train.station == s].iloc[0] for s in stats]\n",
    "alts = [df_train.station_alt[df_train.station == s].iloc[0] for s in stats]"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 67,
=======
   "execution_count": 59,
>>>>>>> 10f26caf625013db86fe1e1f84b2d01bc1a5b353
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import cartopy.crs as ccrs\n",
    "import cartopy.feature as cfeature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<cartopy.mpl.feature_artist.FeatureArtist at 0x2318203d978>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2318237b9b0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(1, 1, 1, projection=ccrs.PlateCarree())\n",
    "ax.scatter(lons, lats, c=alts, cmap='gist_earth')\n",
    "ax.add_feature(cfeature.LAND)\n",
    "ax.add_feature(cfeature.OCEAN)\n",
    "ax.add_feature(cfeature.COASTLINE)\n",
    "ax.add_feature(cfeature.BORDERS, linestyle='-')\n",
    "ax.add_feature(cfeature.LAKES, alpha=0.5)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  },
  "toc": {
   "nav_menu": {},
   "number_sections": true,
   "sideBar": false,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
